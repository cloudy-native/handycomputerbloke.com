{"version":3,"file":"component---src-pages-index-tsx-46f4bc98819618d03e7b.js","mappings":"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","sources":["webpack://handycomputerbloke/./src/components/info-card.tsx","webpack://handycomputerbloke/./src/components/matrix.tsx","webpack://handycomputerbloke/./node_modules/@chakra-ui/media-query/dist/chakra-ui-media-query.esm.js","webpack://handycomputerbloke/./src/pages/index.tsx"],"sourcesContent":["import { Box, useColorModeValue } from '@chakra-ui/react';\nimport React from 'react';\n\nexport default function InfoCard({ children }) {\n  return (\n    <Box w=\"100%\" p={4} boxShadow=\"md\" borderRadius=\"xl\" borderWidth={'1px'}>\n      {children}\n    </Box>\n  );\n}\n","import { SimpleGrid } from '@chakra-ui/react';\nimport React from 'react';\n\nexport default function Matrix({ children }) {\n  return (\n    <SimpleGrid columns={{ sm: 1, md: 2 }} spacing={4}>\n      {children}\n    </SimpleGrid>\n  );\n}\n","import { useTheme } from '@chakra-ui/system';\nimport { isBrowser, __DEV__, memoizedGet, isNumber, breakpoints, isArray, fromEntries, arrayToObjectNotation } from '@chakra-ui/utils';\nimport * as React from 'react';\nimport React__default from 'react';\nimport { useEnvironment } from '@chakra-ui/react-env';\nvar useSafeLayoutEffect = isBrowser ? React.useLayoutEffect : React.useEffect;\n/**\n * React hook that tracks state of a CSS media query\n *\n * @param query the media query to match\n */\n\nfunction useMediaQuery(query) {\n  var env = useEnvironment();\n  var queries = Array.isArray(query) ? query : [query];\n  var isSupported = isBrowser && \"matchMedia\" in env.window;\n\n  var _React$useState = React.useState(queries.map(function (query) {\n    return isSupported ? !!env.window.matchMedia(query).matches : false;\n  })),\n      matches = _React$useState[0],\n      setMatches = _React$useState[1];\n\n  useSafeLayoutEffect(function () {\n    if (!isSupported) return undefined;\n    var mediaQueryList = queries.map(function (query) {\n      return env.window.matchMedia(query);\n    });\n    var listenerList = mediaQueryList.map(function () {\n      var listener = function listener() {\n        var isEqual = function isEqual(prev, curr) {\n          return prev.length === curr.length && prev.every(function (elem, idx) {\n            return elem === curr[idx];\n          });\n        };\n\n        var currentMatches = mediaQueryList.map(function (mediaQuery) {\n          return mediaQuery.matches;\n        });\n\n        if (!isEqual(matches, currentMatches)) {\n          setMatches(currentMatches);\n        }\n      };\n\n      env.window.addEventListener(\"resize\", listener);\n      return listener;\n    });\n    return function () {\n      mediaQueryList.forEach(function (_, index) {\n        env.window.removeEventListener(\"resize\", listenerList[index]);\n      });\n    };\n  }, [query]);\n  return matches;\n}\n/**\n * Visibility\n *\n * React component to control the visibility of its\n * children based on the current breakpoint\n */\n\n\nvar Visibility = function Visibility(props) {\n  var breakpoint = props.breakpoint,\n      hide = props.hide,\n      children = props.children;\n\n  var _useMediaQuery = useMediaQuery(breakpoint),\n      show = _useMediaQuery[0];\n\n  var isVisible = hide ? !show : show;\n  var rendered = isVisible ? children : null;\n  return rendered;\n};\n\nvar Hide = function Hide(props) {\n  var children = props.children;\n  var query = useQuery(props);\n  return /*#__PURE__*/React.createElement(Visibility, {\n    breakpoint: query,\n    hide: true\n  }, children);\n};\n\nif (__DEV__) {\n  Hide.displayName = \"Hide\";\n}\n\nvar Show = function Show(props) {\n  var children = props.children;\n  var query = useQuery(props);\n  return /*#__PURE__*/React.createElement(Visibility, {\n    breakpoint: query\n  }, children);\n};\n\nif (__DEV__) {\n  Show.displayName = \"Show\";\n}\n\nvar getBreakpoint = function getBreakpoint(theme, value) {\n  return memoizedGet(theme, \"breakpoints.\" + value, value);\n};\n\nfunction useQuery(props) {\n  var _props$breakpoint = props.breakpoint,\n      breakpoint = _props$breakpoint === void 0 ? \"\" : _props$breakpoint,\n      below = props.below,\n      above = props.above;\n  var theme = useTheme();\n  var bpBelow = getBreakpoint(theme, below);\n  var bpAbove = getBreakpoint(theme, above);\n  var query = breakpoint;\n\n  if (bpBelow) {\n    query = \"(max-width: \" + bpBelow + \")\";\n  } else if (bpAbove) {\n    query = \"(min-width: \" + bpAbove + \")\";\n  }\n\n  return query;\n}\n/**\n * React hook used to get the user's animation preference.\n */\n\n\nfunction usePrefersReducedMotion() {\n  var _useMediaQuery = useMediaQuery(\"(prefers-reduced-motion: reduce)\"),\n      prefersReducedMotion = _useMediaQuery[0];\n\n  return prefersReducedMotion;\n}\n/**\n * React hook for getting the user's color mode preference.\n */\n\n\nfunction useColorModePreference() {\n  var _useMediaQuery2 = useMediaQuery([\"(prefers-color-scheme: light)\", \"(prefers-color-scheme: dark)\"]),\n      isLight = _useMediaQuery2[0],\n      isDark = _useMediaQuery2[1];\n\n  if (isLight) return \"light\";\n  if (isDark) return \"dark\";\n  return undefined;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction createMediaQueries(breakpoints) {\n  return Object.entries(breakpoints) // sort css units in ascending order to ensure media queries are generated\n  // in the correct order and reference to each other correctly aswell\n  .sort(function (a, b) {\n    return Number.parseInt(a[1], 10) > Number.parseInt(b[1], 10) ? 1 : -1;\n  }).map(function (_ref, index, arr) {\n    var breakpoint = _ref[0],\n        minWidth = _ref[1]; // given a following breakpoint\n\n    var next = arr[index + 1]; // this breakpoint must end prior the threshold of the next\n\n    var maxWidth = next ? next[1] : undefined;\n    var query = createMediaQueryString(minWidth, maxWidth);\n    return {\n      minWidth: minWidth,\n      maxWidth: maxWidth,\n      breakpoint: breakpoint,\n      query: query\n    };\n  });\n}\n/**\n * Create a media query string from the breakpoints,\n * using a combination of `min-width` and `max-width`.\n */\n\n\nfunction createMediaQueryString(minWidth, maxWidth) {\n  var hasMinWidth = parseInt(minWidth, 10) >= 0;\n\n  if (!hasMinWidth && !maxWidth) {\n    return \"\";\n  }\n\n  var query = \"(min-width: \" + toMediaString(minWidth) + \")\";\n\n  if (!maxWidth) {\n    return query;\n  }\n\n  if (query) {\n    query += \" and \";\n  }\n\n  query += \"(max-width: \" + toMediaString(subtract(maxWidth)) + \")\";\n  return query;\n}\n\nvar measurementRegex = /([0-9]+\\.?[0-9]*)/;\n\nvar calculateMeasurement = function calculateMeasurement(value, modifier) {\n  if (typeof value === \"number\") {\n    return \"\" + (value + modifier);\n  }\n\n  return value.replace(measurementRegex, function (match) {\n    return \"\" + (parseFloat(match) + modifier);\n  });\n};\n/**\n * 0.01 and 0.1 are too small of a difference for `px` breakpoint values\n *\n * @see https://github.com/chakra-ui/chakra-ui/issues/2188#issuecomment-712774785\n */\n\n\nfunction subtract(value) {\n  return calculateMeasurement(value, value.endsWith(\"px\") ? -1 : -0.01);\n}\n/**\n * Convert media query value to string\n */\n\n\nfunction toMediaString(value) {\n  return isNumber(value) ? value + \"px\" : value;\n}\n\nvar _excluded = [\"query\"],\n    _excluded2 = [\"query\"];\n/**\n * React hook used to get the current responsive media breakpoint.\n *\n * @param defaultBreakpoint default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n */\n\nfunction useBreakpoint(defaultBreakpoint) {\n  var _useTheme = useTheme(),\n      breakpoints = _useTheme.breakpoints;\n\n  var env = useEnvironment();\n  var mediaQueries = React__default.useMemo(function () {\n    return createMediaQueries(_extends({\n      base: \"0px\"\n    }, breakpoints));\n  }, [breakpoints]);\n\n  var _React$useState = React__default.useState(function () {\n    if (!defaultBreakpoint) {\n      return undefined;\n    }\n\n    var mediaQuery = mediaQueries.find(function (_ref) {\n      var breakpoint = _ref.breakpoint;\n      return breakpoint === defaultBreakpoint;\n    });\n\n    if (mediaQuery) {\n      mediaQuery.query;\n\n      var breakpoint = _objectWithoutPropertiesLoose(mediaQuery, _excluded);\n\n      return breakpoint;\n    }\n\n    return undefined;\n  }),\n      currentBreakpoint = _React$useState[0],\n      setCurrentBreakpoint = _React$useState[1];\n\n  var current = currentBreakpoint == null ? void 0 : currentBreakpoint.breakpoint;\n  var update = React__default.useCallback(function (query, breakpoint) {\n    if (query.matches && current !== breakpoint.breakpoint) {\n      setCurrentBreakpoint(breakpoint);\n    }\n  }, [current]);\n  React__default.useEffect(function () {\n    var listeners = new Set();\n    mediaQueries.forEach(function (_ref2) {\n      var query = _ref2.query,\n          breakpoint = _objectWithoutPropertiesLoose(_ref2, _excluded2);\n\n      var mediaQuery = env.window.matchMedia(query); // trigger an initial update to determine media query\n\n      update(mediaQuery, breakpoint);\n\n      var handleChange = function handleChange() {\n        update(mediaQuery, breakpoint);\n      }; // add media query-listener\n\n\n      mediaQuery.addListener(handleChange); // push the media query list handleChange\n      // so we can use it to remove Listener\n\n      listeners.add({\n        mediaQuery: mediaQuery,\n        handleChange: handleChange\n      });\n      return function () {\n        // clean up 1\n        mediaQuery.removeListener(handleChange);\n      };\n    });\n    return function () {\n      // clean up 2: for safety\n      listeners.forEach(function (_ref3) {\n        var mediaQuery = _ref3.mediaQuery,\n            handleChange = _ref3.handleChange;\n        mediaQuery.removeListener(handleChange);\n      });\n      listeners.clear();\n    };\n  }, [mediaQueries, breakpoints, update, env.window]);\n  return current;\n}\n\nfunction getClosestValue(values, breakpoint, breakpoints$1) {\n  if (breakpoints$1 === void 0) {\n    breakpoints$1 = breakpoints;\n  }\n\n  var index = Object.keys(values).indexOf(breakpoint);\n\n  if (index !== -1) {\n    return values[breakpoint];\n  }\n\n  var stopIndex = breakpoints$1.indexOf(breakpoint);\n\n  while (stopIndex >= 0) {\n    var key = breakpoints$1[stopIndex];\n\n    if (values[key] != null) {\n      index = stopIndex;\n      break;\n    }\n\n    stopIndex -= 1;\n  }\n\n  if (index !== -1) {\n    var _key = breakpoints$1[index];\n    return values[_key];\n  }\n\n  return undefined;\n}\n/**\n * React hook for getting the value for the current breakpoint from the\n * provided responsive values object.\n *\n * @param values\n * @param defaultBreakpoint default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n *\n * @example\n * const width = useBreakpointValue({ base: '150px', md: '250px' })\n */\n\n\nfunction useBreakpointValue(values, defaultBreakpoint) {\n  var breakpoint = useBreakpoint(defaultBreakpoint);\n  var theme = useTheme();\n  if (!breakpoint) return undefined;\n  /**\n   * Get the non-number breakpoint keys from the provided breakpoints\n   */\n\n  var breakpoints = Object.keys(theme.breakpoints);\n  var obj = isArray(values) ? fromEntries(Object.entries(arrayToObjectNotation(values, breakpoints)).map(function (_ref) {\n    var key = _ref[0],\n        value = _ref[1];\n    return [key, value];\n  })) : values;\n  return getClosestValue(obj, breakpoint, breakpoints);\n}\n\nexport { Hide, Show, useBreakpoint, useBreakpointValue, useColorModePreference, useMediaQuery, usePrefersReducedMotion, useQuery };","import { CheckIcon } from '@chakra-ui/icons';\nimport {\n  Box, Divider,\n  Flex,\n  Grid,\n  GridItem,\n  Heading, HStack, Link, SimpleGrid,\n  Stack,\n  Text, useBreakpointValue,\n  VStack\n} from '@chakra-ui/react';\nimport React, { ReactElement } from 'react';\nimport InfoCard from '../components/info-card';\nimport Matrix from '../components/matrix';\ninterface ServiceCardProps {\n  heading: string;\n  blurb: string[];\n}\n\nconst services: ServiceCardProps[] = [\n  {\n    heading: 'Technical Due Diligence',\n    blurb: [\n      \"You're the Due Diligence Team looking at a software company.\",\n      \"You need help with the technical part and that's where we come in. We conduct a thorough, nowhere-to-hide technical evaluation.\",\n      'Our reports are always as candid as they are actionable.'\n    ]\n  },\n  {\n    heading: 'Architecture Deep Dive',\n    blurb: [\n      'This is conducting Due Diligence on yourself.',\n      \"Often, this comes about because you made or inherited a monolith and it's time to fix it.\",\n      \"We're honest. If your architecture is broken, we'll let you know. We'll be nice about it. But trust us.\",\n      \"We'll tell you how to fix it. And help if you want.\"\n    ]\n  },\n  {\n    heading: 'Technical Debt Remediation',\n    blurb: [\n      \"As seasoned, hands-on veterans of the software industry we know what makes things work. And of course what doesn't.\",\n      \"We've taken components a company deems too risky to touch and reworked them to be less scary.\",\n      'We never boil the ocean when we refactor legacy code. Instead, we spend the time it takes up front to plan incrementally testable, deployable evolutions.'\n    ]\n  },\n  {\n    heading: 'Cloud Adoption',\n    blurb: [\n      \"You may be just starting out migrating to the cloud. Or you may be in the process and you think it could be going better. Perhaps you did a forklift from your data center and are wonder what's up with your bill.\",\n      \"Wherever you are in your cloud journey, we've got you covered.\"\n    ]\n  }\n];\n\ninterface QuestionCardProps {\n  question: string;\n  answers: string[];\n}\n\nconst questions: QuestionCardProps[] = [\n  {\n    question: \"Where's your architecture diagram?\",\n    answers: [\n      'Let me send you the PowerPoint.',\n      \"Here it is, but it's very out of date.\"\n    ]\n  },\n  {\n    question: 'Can I see a Pull Request?',\n    answers: [\"We don't use PRs.\", `No you can't.`]\n  },\n  {\n    question: 'How do you plan sprints?',\n    answers: [\n      \"Not sure who has it right now, but there's a spreadsheet.\",\n      'We invented our own version of Agile and have one long sprint really.'\n    ]\n  },\n  {\n    question: \"What's your unit test coverage?\",\n    answers: [\n      'We keep a good list of manual tests and use that.',\n      'We can write code faster without them.'\n    ]\n  },\n  {\n    question: \"What's your CI and CD?\",\n    answers: [\"What's that?\", 'Bob. Bob does the builds.']\n  },\n  {\n    question: 'Why is your AWS bill breakdown different to the architecture?',\n    answers: [\"We don't know.\"]\n  }\n];\n\ninterface SolutionCardProps {\n  topic: string;\n  solutions: string[];\n}\n\nconst solutions: SolutionCardProps[] = [\n  {\n    topic: 'Cloud Migration',\n    solutions: [\n      \"It's OK to start with forklift because it's low risk and you mostly have the skills already.\",\n      \"Think about cloud-native as a fast follow. But please think about it. That's our specialty.\",\n      'Pick the same cloud provider everyone else uses.'\n    ]\n  },\n  {\n    topic: 'Cloud Native',\n    solutions: [\n      \"Don't hesitate. Running your forklift migration in the cloud is not cloud native. Using managed services is.\",\n      'Start with the lowest-friction components. Like anything running on a provisioned VM after the forklift that has a managed service equivalent.',\n      \"Either migrate something to a managed service, or optimize something that's already native. But please not both at the same time.\"\n    ]\n  },\n  {\n    topic: 'Production Readiness',\n    solutions: [\n      'Make all metrics observable independently.',\n      'Observe them.',\n      'Define and follow a mandatory \"Definition of Done.\"',\n      'Eliminate manual production access by default.',\n      'Use Infrastructure-as-Code (IaC) and deploy automatically.'\n    ]\n  }\n];\n\ninterface SplashCardProps {\n  splash: string[];\n}\n\nconst splashCards: SplashCardProps[] = [\n  {\n    splash: ['Technical evaluation', 'Tailored for you', 'Nowhere to hide']\n  },\n  {\n    splash: [`Proven expertise`, 'Politely candid', 'Always actionable']\n  }\n];\n\nfunction ServiceCard(props: ServiceCardProps) {\n  return (\n    <InfoCard>\n      <VStack spacing={2} align=\"stretch\">\n        <Heading size=\"md\">{props.heading}</Heading>\n        {props.blurb.map((t, index) => (\n          <Text key={index}>{t}</Text>\n        ))}\n      </VStack>\n    </InfoCard>\n  );\n}\n\nfunction QuestionCard(questionCardProps: QuestionCardProps) {\n  const { question, answers } = questionCardProps;\n\n  return (\n    <InfoCard>\n      <VStack spacing={2} align=\"stretch\">\n        <Grid templateColumns=\"repeat(12, 1fr)\">\n          <GridItem>Q:</GridItem>\n          <GridItem colSpan={11}>\n            <Text fontWeight=\"1000\">{question}</Text>\n          </GridItem>\n        </Grid>\n        <Divider />\n        {answers.map((answer, index) => (\n          <Grid key={index} templateColumns=\"repeat(12, 1fr)\">\n            <GridItem>A:</GridItem>\n            <GridItem colSpan={11}>{answer}</GridItem>\n          </Grid>\n        ))}\n      </VStack>\n    </InfoCard>\n  );\n}\n\nfunction SolutionCard(solutionCardProps: SolutionCardProps) {\n  return (\n    <InfoCard>\n      <VStack spacing={4} align=\"stretch\">\n        <Heading size=\"md\">{solutionCardProps.topic}</Heading>\n        {solutionCardProps.solutions.map((t, index) => (\n          <Grid key={index} templateColumns=\"repeat(12, 1fr)\">\n            <GridItem>\n              <CheckIcon color=\"green.500\" />\n            </GridItem>\n            <GridItem colSpan={11}>\n              <Text>{t}</Text>\n            </GridItem>\n          </Grid>\n        ))}\n      </VStack>\n    </InfoCard>\n  );\n}\n\nfunction ServicesGrid() {\n  return (\n    <Matrix>\n      {services.map((cardInfo, index) => (\n        <ServiceCard key={index} {...cardInfo} />\n      ))}\n    </Matrix>\n  );\n}\n\nfunction QuestionGrid() {\n  return (\n    <Matrix>\n      {questions.map((cardInfo, index) => (\n        <QuestionCard key={index} {...cardInfo} />\n      ))}\n    </Matrix>\n  );\n}\n\nfunction SolutionGrid() {\n  return (\n    <Matrix>\n      {solutions.map((cardInfo, index) => (\n        <SolutionCard key={index} {...cardInfo} />\n      ))}\n    </Matrix>\n  );\n}\n\ninterface TestimonialCardProps {\n  title: string;\n  quote: string;\n  name: string;\n  company: string;\n}\n\nconst testimonials: TestimonialCardProps[] = [\n  {\n    title: 'How on Earth...',\n    quote: '... did they get all that in two days of due diligence?',\n    name: 'B G',\n    company: 'CTO, Acquired Company'\n  },\n  {\n    title: 'We did completed the deal...',\n    quote:\n      '... but with our eyes open [based on the] risks surfaced during the thorough technical due diligence.',\n    name: 'A S',\n    company: 'Partner, Private Equity'\n  },\n  {\n    title: 'We did not have to boil the ocean',\n    quote:\n      'We were able to start migrating to the cloud component by component. We engaged [Handy Computer Bloke] from the start and came out the other side experts!',\n    name: 'J B',\n    company: 'Architect, Cloud Late Bloomer'\n  }\n];\n\nconst TestimonialAvatar = ({\n  name,\n  title\n}: {\n  name: string;\n  title: string;\n}) => {\n  return (\n    <HStack>\n      {/* <Avatar name={name} mb={2} /> */}\n      <Text fontSize={'sm'}>{title}</Text>\n    </HStack>\n  );\n};\n\nfunction TestimonialCard(testimonialCardProps: TestimonialCardProps) {\n  return (\n    <InfoCard>\n      <VStack spacing={4} align=\"stretch\">\n        <TestimonialAvatar\n          name={testimonialCardProps.name}\n          title={testimonialCardProps.company}\n        />\n        <Divider />\n        <Heading size=\"md\">{testimonialCardProps.title}</Heading>\n        <Text>{testimonialCardProps.quote}</Text>\n      </VStack>\n    </InfoCard>\n  );\n}\n\nfunction TestimonialsGrid() {\n  return (\n    <Matrix>\n      {testimonials.map((cardInfo, index) => (\n        <TestimonialCard key={index} {...cardInfo} />\n      ))}\n    </Matrix>\n  );\n}\n\nfunction SplashCard(props: SplashCardProps) {\n  return (\n    <VStack w=\"100%\" align={'stretch'}>\n      {props.splash.map((t, index) => (\n        <Text key={index} color={'white'} fontWeight={'bold'} fontSize={'6xl'}>\n          {t}\n        </Text>\n      ))}\n    </VStack>\n  );\n}\n\nfunction Splash() {\n  return (\n    <>\n      <Flex\n        h={'100vh'}\n        // backgroundImage={'url(https://images.unsplash.com/photo-1588665306984-d5c6f62224aa?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=2238&q=80)'}\n        backgroundSize={'cover'}>\n        <VStack\n          w={'full'}\n          align={'flex-start'}\n          px={useBreakpointValue({ base: 10 })}\n          py={useBreakpointValue({ base: 20 })}\n          bgGradient={'linear(to-r, blackAlpha.800, blackAlpha.100)'}>\n          <SimpleGrid columns={{ base: 1 }} spacing={'36'}>\n            {splashCards.map((splash, index) => (\n              <SplashCard key={index} {...splash} />\n            ))}\n          </SimpleGrid>\n        </VStack>\n      </Flex>\n    </>\n  );\n}\n\ninterface FeatureProps {\n  text: string;\n  iconBg: string;\n  icon?: ReactElement;\n}\n\nconst Feature = ({ text, icon, iconBg }: FeatureProps) => {\n  return (\n    <Stack direction={'row'} align={'center'}>\n      <Flex\n        w={8}\n        h={8}\n        align={'center'}\n        justify={'center'}\n        rounded={'full'}\n        bg={iconBg}>\n        {icon}\n      </Flex>\n      <Text fontWeight={600}>{text}</Text>\n    </Stack>\n  );\n};\n\nfunction IndexPage() {\n  return (\n    <VStack spacing={10} maxWidth=\"100%\" align=\"stretch\">\n      <Splash />\n      <Divider />\n      <Stack as={Box} textAlign={'center'} spacing={2}>\n        <Text fontSize={'2xl'}>\n          We build on our core competency of Technical Due Diligence.\n        </Text>\n        <Text fontSize={'2xl'}>We work quickly and efficiently.</Text>\n        <Text fontSize={'2xl'}>\n          We have strong opinions, but are not dogmatic or arbitrary.\n        </Text>\n      </Stack>\n      <Divider />\n      <Heading>Services</Heading>\n      <ServicesGrid />\n      <Heading>What people say</Heading>\n      <TestimonialsGrid />\n      <VStack align=\"stretch\">\n        <Heading>Revealing Questions and Awkward Answers</Heading>\n        <Text>From the archives...</Text>\n      </VStack>\n      <QuestionGrid />\n      {/* <Heading>Common Solutions</Heading>\n      <SolutionGrid /> */}\n    </VStack>\n  );\n}\n\nexport default IndexPage;\n"],"names":["InfoCard","children","w","p","boxShadow","borderRadius","borderWidth","Matrix","columns","sm","md","spacing","_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","_extends","assign","arguments","prototype","hasOwnProperty","call","apply","this","createMediaQueries","breakpoints","entries","sort","a","b","Number","parseInt","map","_ref","index","arr","breakpoint","minWidth","next","maxWidth","undefined","query","toMediaString","value","modifier","replace","measurementRegex","match","parseFloat","calculateMeasurement","endsWith","subtract","createMediaQueryString","_excluded","_excluded2","useBreakpointValue","values","defaultBreakpoint","env","mediaQueries","base","_React$useState","mediaQuery","find","currentBreakpoint","setCurrentBreakpoint","current","update","matches","listeners","Set","forEach","_ref2","window","matchMedia","handleChange","addListener","add","removeListener","_ref3","clear","useBreakpoint","theme","breakpoints$1","stopIndex","getClosestValue","services","heading","blurb","questions","question","answers","splashCards","splash","ServiceCard","props","align","size","t","QuestionCard","questionCardProps","templateColumns","colSpan","fontWeight","answer","ServicesGrid","cardInfo","QuestionGrid","testimonials","title","quote","name","company","TestimonialAvatar","fontSize","TestimonialCard","testimonialCardProps","TestimonialsGrid","SplashCard","color","Splash","h","backgroundSize","px","py","bgGradient","as","Box","textAlign"],"sourceRoot":""}